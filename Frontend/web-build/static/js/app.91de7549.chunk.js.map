{"version":3,"sources":["components/AuthorizationButton.tsx","screens/LoginScreen.tsx","screens/NotFoundScreen.tsx","constants/Colors.ts","components/Themed.tsx","components/UserInvitationForm.tsx","screens/AdministrationScreen.tsx","screens/CollectionAdministrationScreen.tsx","screens/CollectionScreen.tsx","screens/LogisticsScreen.tsx","screens/ProductionScreen.tsx","screens/RecipientScreen.tsx","navigation/TabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["AuthorizationButton","handleAuthorization","discovery","useAutoDiscovery","redirectUri","makeRedirectUri","native","path","authRequest","AuthRequest","clientId","scopes","Button","title","onPress","a","async","getAuthRequestConfigAsync","promptAsync","authSessionResult","console","log","type","codeVerifier","exchangeCodeAsync","code","params","extraParams","code_verifier","then","tokenResponse","catch","error","WebBrowser","styles","StyleSheet","create","container","flex","alignItems","justifyContent","LoginScreen","navigation","View","style","sessionStorage","setItem","accessToken","navigate","NotFoundScreen","Text","TouchableOpacity","replace","link","linkText","backgroundColor","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","UserInvitationForm","axiosInstance","axios","baseURL","headers","getItem","React","isLoadingRoles","setIsLoadingRoles","isLoadingInvite","setIsLoadingInvite","showSuccessSnackbar","setShowSuccessSnackbar","dismissSuccessSnackbar","setEmailToInvite","availableAppRoles","setAvailableAppRoles","get","response","data","finally","emailToInvite","ActivityIndicator","TextInput","value","onChangeText","textInput","buttonContainer","map","availableAppRole","key","id","button","displayName","post","email","appRoleId","disabled","Snackbar","visible","onDismiss","action","label","height","marginBottom","width","textAlign","flexDirection","margin","AdministrationScreen","CollectionAdministrationScreen","separator","marginVertical","CollectionScreen","LogisticsScreen","ProductionScreen","RecipientScreen","Tab","createMaterialTopTabNavigator","TabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","options","tabBarIcon","TabBarIcon","Ionicons","size","prefixes","Linking","config","screens","Login","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","createStackNavigator","screenOptions","headerShown","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.91de7549.chunk.js","sourcesContent":["import React from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n  AuthRequest,\n  exchangeCodeAsync,\n  makeRedirectUri,\n  useAutoDiscovery,\n} from \"expo-auth-session\";\nimport { Button } from \"react-native\";\nimport { AUTHORIZATION_URL } from \"react-native-dotenv\";\n\nWebBrowser.maybeCompleteAuthSession();\n\ntype Props = {\n  handleAuthorization: (tokenResponse: any) => void;\n};\n\nexport default function AuthorizationButton({ handleAuthorization }: Props) {\n  // Endpoint\n  const discovery = useAutoDiscovery(AUTHORIZATION_URL);\n\n  const redirectUri = makeRedirectUri({\n    // For usage in bare and standalone\n    // TODO: Find a redirection tab that actually works for all rights\n    native: \"houe-plastic-recycling://Administration\",\n    path: \"Administration\",\n  });\n\n  const authRequest = new AuthRequest({\n    // TODO: Fix teh hardcoding!\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    // redirectUri: \"houe-plastic-recycling://one\",\n    // For usage in managed apps using the proxy\n    redirectUri,\n  });\n\n  // Request\n  const onPress = async () => {\n    if (discovery) {\n      /* We don't care about the return value of this, but one of the side effects of it is that\n       * the challenge and verifier is set up correctly. This is not the most elegant way of doing\n       * it but that is the way the library works for now */\n      await authRequest.getAuthRequestConfigAsync();\n      const authSessionResult = await authRequest.promptAsync(discovery);\n      console.log(authSessionResult.type);\n      console.log(authRequest.codeVerifier);\n      if (\n        authSessionResult &&\n        authSessionResult.type === \"success\" &&\n        authRequest.codeVerifier &&\n        discovery\n      ) {\n        exchangeCodeAsync(\n          {\n            code: authSessionResult.params.code,\n            scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            // TODO: Fix teh hardcoding!\n            clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n            redirectUri,\n            extraParams: {\n              code_verifier: authRequest.codeVerifier,\n            },\n          },\n          discovery\n        )\n          .then((tokenResponse) => {\n            console.log(\"Token response:\");\n            console.log(tokenResponse);\n            handleAuthorization(tokenResponse);\n          })\n          .catch((error) => {\n            console.log(\"ERROR: \");\n            console.log(error);\n          });\n      }\n    }\n  };\n\n  return <Button title=\"Login\" onPress={onPress} />;\n}\n","import { StackScreenProps } from \"@react-navigation/stack\";\nimport React, { FC } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport AuthorizationButton from \"../components/AuthorizationButton\";\nimport { RootStackParamList } from \"../types\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\ntype Props = StackScreenProps<RootStackParamList, \"Login\">;\n\nconst LoginScreen: FC<Props> = ({ navigation }) => {\n  const handleAuthorizationSuccess = (tokenResponse: any) => {\n    // TODO: Add validation and proper typings here!\n    sessionStorage.setItem('accessToken', tokenResponse.accessToken)\n\n    navigation.navigate(\"Root\");\n  };\n  return (\n    <View style={styles.container}>\n      <AuthorizationButton handleAuthorization={handleAuthorizationSuccess} />\n    </View>\n  );\n};\n\nexport default LoginScreen;\n","import { StackScreenProps } from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\n\nimport { RootStackParamList } from \"../types\";\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, \"NotFound\">) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn&apos;t exist.</Text>\n      <TouchableOpacity\n        onPress={() => navigation.replace(\"Root\")}\n        style={styles.link}\n      >\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: \"#2e78b7\",\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from \"react\";\nimport { Text as DefaultText, View as DefaultView } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  }\n  return Colors[theme][colorName];\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor(\n    { light: lightColor, dark: darkColor },\n    \"background\"\n  );\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import axios, { AxiosResponse } from \"axios\";\nimport * as React from \"react\";\nimport { ActivityIndicator, Button, StyleSheet, TextInput } from \"react-native\";\nimport { Snackbar } from \"react-native-paper\";\n\nimport { View } from \"./Themed\";\n\n// TODO: This should come from autogenerated typings from the backend\ntype AppRole = {\n  displayName: string;\n  id: string;\n};\n\nexport default function UserInvitationForm() {\n  // TODO: Get the base url out in a config file that is environment specific!!\n  const axiosInstance = axios.create({\n    baseURL: \"http://localhost:7071/api\",\n    headers: {\n      \"access-token\": sessionStorage.getItem(\"accessToken\"),\n    },\n  });\n\n  const [isLoadingRoles, setIsLoadingRoles] = React.useState(false);\n  const [isLoadingInvite, setIsLoadingInvite] = React.useState(false);\n  const [showSuccessSnackbar, setShowSuccessSnackbar] = React.useState(false);\n  const dismissSuccessSnackbar = () => {\n    setShowSuccessSnackbar(false);\n    // TODO: This should probably be somewhere else\n    setEmailToInvite(\"\");\n  };\n\n  const [availableAppRoles, setAvailableAppRoles] = React.useState<AppRole[]>(\n    []\n  );\n  // Initially, fetch the available app roles\n  React.useEffect(() => {\n    setIsLoadingRoles(true);\n\n    axiosInstance\n      .get(\"/UserAppRoles\")\n      .then((response: AxiosResponse<AppRole[]>) => {\n        setAvailableAppRoles(response.data);\n      })\n      .finally(() => setIsLoadingRoles(false));\n  }, []);\n\n  const [emailToInvite, setEmailToInvite] = React.useState(\"\");\n\n  // TODO: Extend this with regexp to verify the shape of the email\n  const emailToInviteIsInvalid = () => {\n    return emailToInvite === \"\";\n  };\n\n  return (\n    <View style={styles.container}>\n      {isLoadingInvite ? (\n        <ActivityIndicator />\n      ) : (\n        <TextInput\n          value={emailToInvite}\n          onChangeText={setEmailToInvite}\n          style={styles.textInput}\n        />\n      )}\n      <View style={styles.buttonContainer}>\n        {isLoadingRoles ? (\n          <ActivityIndicator />\n        ) : (\n          availableAppRoles.map((availableAppRole: AppRole) => {\n            const onPress = () => {\n              axiosInstance\n                .post(\"/InviteExternalUser\", {\n                  email: emailToInvite,\n                  appRoleId: availableAppRole.id,\n                })\n                .then(() => setShowSuccessSnackbar(true))\n                .finally(() => setIsLoadingInvite(false));\n\n              setEmailToInvite(\"\");\n              setIsLoadingInvite(true);\n            };\n\n            return (\n              <View key={availableAppRole.id} style={styles.button}>\n                <Button\n                  title={availableAppRole.displayName}\n                  onPress={onPress}\n                  disabled={emailToInviteIsInvalid()}\n                />\n              </View>\n            );\n          })\n        )}\n      </View>\n      <Snackbar\n        visible={showSuccessSnackbar}\n        onDismiss={dismissSuccessSnackbar}\n        action={{\n          label: \"OK\",\n          onPress: dismissSuccessSnackbar,\n        }}\n      >\n        Brugeren er inviteret til MyTrash\n      </Snackbar>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  textInput: {\n    height: 30,\n    marginBottom: 10,\n    width: \"80%\",\n    textAlign: \"center\",\n    backgroundColor: \"lightgrey\",\n  },\n  container: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"100%\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n  },\n  button: {\n    margin: 5,\n  },\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\n\nimport { View } from \"../components/Themed\";\nimport UserInvitationForm from \"../components/UserInvitationForm\";\n\nexport default function AdministrationScreen() {\n  return (\n    <View style={styles.container}>\n      <UserInvitationForm />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\n\nimport { Text, View } from \"../components/Themed\";\n\nexport default function CollectionAdministrationScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Not implemented yet</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\n\nimport { Text, View } from \"../components/Themed\";\n\nexport default function CollectionScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Not implemented yet</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\n\nimport { Text, View } from \"../components/Themed\";\n\nexport default function LogisticsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Not implemented yet</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\n\nimport { Text, View } from \"../components/Themed\";\n\nexport default function ProductionScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Not implemented yet</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\n\nimport { Text, View } from \"../components/Themed\";\n\nexport default function RecipientScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Not implemented yet</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n","import { Ionicons } from \"@expo/vector-icons\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { StackScreenProps } from \"@react-navigation/stack\";\nimport React, { FC } from \"react\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport AdministrationScreen from \"../screens/AdministrationScreen\";\nimport CollectionAdministrationScreen from \"../screens/CollectionAdministrationScreen\";\nimport CollectionScreen from \"../screens/CollectionScreen\";\nimport LogisticsScreen from \"../screens/LogisticsScreen\";\nimport ProductionScreen from \"../screens/ProductionScreen\";\nimport RecipientScreen from \"../screens/RecipientScreen\";\nimport { TabsParamList, RootStackParamList } from \"../types\";\n\nconst Tab = createMaterialTopTabNavigator<TabsParamList>();\n\ntype Props = StackScreenProps<RootStackParamList, \"Root\">;\n\nconst TabNavigator: FC<Props> = () => {\n  const colorScheme = useColorScheme();\n\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Administration\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}\n    >\n      <Tab.Screen\n        name=\"Administration\"\n        component={AdministrationScreen}\n        options={{\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Indsamlingsadministration\"\n        component={CollectionAdministrationScreen}\n        options={{\n          tabBarIcon: ({ color }: { color: string }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Indsamling\"\n        component={CollectionScreen}\n        options={{\n          tabBarIcon: ({ color }: { color: string }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Logistik\"\n        component={LogisticsScreen}\n        options={{\n          tabBarIcon: ({ color }: { color: string }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Modtagelse\"\n        component={RecipientScreen}\n        options={{\n          tabBarIcon: ({ color }: { color: string }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Produktion\"\n        component={ProductionScreen}\n        options={{\n          tabBarIcon: ({ color }: { color: string }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport default TabNavigator;\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon({\n  name,\n  color,\n}: {\n  name: React.ComponentProps<typeof Ionicons>[\"name\"];\n  color: string;\n}) {\n  return (\n    <Ionicons\n      size={30}\n      style={{ marginBottom: -3 }}\n      name={name}\n      color={color}\n    />\n  );\n}\n","import * as Linking from \"expo-linking\";\n\nexport default {\n  prefixes: [Linking.makeUrl(\"/\")],\n  config: {\n    screens: {\n      Login: \"login\",\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: \"one\",\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: \"two\",\n            },\n          },\n        },\n      },\n      NotFound: \"*\",\n    },\n  },\n};\n","import {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport { ColorSchemeName } from \"react-native\";\nimport LoginScreen from \"../screens/LoginScreen\";\n\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport { RootStackParamList } from \"../types\";\nimport TabNavigator from \"./TabNavigator\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator\n      screenOptions={{ headerShown: false }}\n      initialRouteName=\"Login\"\n    >\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Root\" component={TabNavigator} />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n    </Stack.Navigator>\n  );\n}\n","import \"react-native-gesture-handler\";\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  }\n  return (\n    <SafeAreaProvider>\n      <Navigation colorScheme={colorScheme} />\n      <StatusBar />\n    </SafeAreaProvider>\n  );\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}