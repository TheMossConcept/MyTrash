import axios, { AxiosResponse } from "axios";
import * as React from "react";
import { ActivityIndicator, Button, StyleSheet, TextInput } from "react-native";
import { Snackbar } from "react-native-paper";

import { View } from "./Themed";

// TODO: This should come from autogenerated typings from the backend
type AppRole = {
  displayName: string;
  id: string;
};

export default function UserInvitationForm() {
  // TODO: Get the base url out in a config file that is environment specific!!
  const axiosInstance = axios.create({
    baseURL: "http://localhost:7071/api",
    headers: {
      "access-token": sessionStorage.getItem("accessToken"),
    },
  });

  const [isLoadingRoles, setIsLoadingRoles] = React.useState(false);
  const [isLoadingInvite, setIsLoadingInvite] = React.useState(false);
  const [showSuccessSnackbar, setShowSuccessSnackbar] = React.useState(false);
  const dismissSuccessSnackbar = () => {
    setShowSuccessSnackbar(false);
    // TODO: This should probably be somewhere else
    setEmailToInvite("");
  };

  const [availableAppRoles, setAvailableAppRoles] = React.useState<AppRole[]>(
    []
  );
  // Initially, fetch the available app roles
  React.useEffect(() => {
    setIsLoadingRoles(true);

    axiosInstance
      .get("/UserAppRoles")
      .then((response: AxiosResponse<AppRole[]>) => {
        setAvailableAppRoles(response.data);
      })
      .finally(() => setIsLoadingRoles(false));
  }, []);

  const [emailToInvite, setEmailToInvite] = React.useState("");

  // TODO: Extend this with regexp to verify the shape of the email
  const emailToInviteIsInvalid = () => {
    return emailToInvite === "";
  };

  return (
    <View style={styles.container}>
      {isLoadingInvite ? (
        <ActivityIndicator />
      ) : (
        <TextInput
          value={emailToInvite}
          onChangeText={setEmailToInvite}
          style={styles.textInput}
        />
      )}
      <View style={styles.buttonContainer}>
        {isLoadingRoles ? (
          <ActivityIndicator />
        ) : (
          availableAppRoles.map((availableAppRole: AppRole) => {
            const onPress = () => {
              axiosInstance
                .post("/InviteExternalUser", {
                  email: emailToInvite,
                  appRoleId: availableAppRole.id,
                })
                .then(() => setShowSuccessSnackbar(true))
                .finally(() => setIsLoadingInvite(false));

              setEmailToInvite("");
              setIsLoadingInvite(true);
            };

            return (
              <View key={availableAppRole.id} style={styles.button}>
                <Button
                  title={availableAppRole.displayName}
                  onPress={onPress}
                  disabled={emailToInviteIsInvalid()}
                />
              </View>
            );
          })
        )}
      </View>
      <Snackbar
        visible={showSuccessSnackbar}
        onDismiss={dismissSuccessSnackbar}
        action={{
          label: "OK",
          onPress: dismissSuccessSnackbar,
        }}
      >
        Brugeren er inviteret til MyTrash
      </Snackbar>
    </View>
  );
}

const styles = StyleSheet.create({
  textInput: {
    height: 30,
    marginBottom: 10,
    width: "80%",
    textAlign: "center",
    backgroundColor: "lightgrey",
  },
  container: {
    justifyContent: "center",
    alignItems: "center",
    width: "100%",
    height: "100%",
  },
  buttonContainer: {
    flexDirection: "row",
  },
  button: {
    margin: 5,
  },
});
