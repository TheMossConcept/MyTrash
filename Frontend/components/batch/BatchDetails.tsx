import { DateTime } from "luxon";
import React, { FC, useState } from "react";
import { TouchableOpacity } from "react-native";
import { Card, List } from "react-native-paper";
import InformationText from "../styled/InformationText";
import Subheader from "../styled/Subheader";

// TODO: This should come autogenerated from the backend
// once we have end-to-end typings!!
export type Batch = {
  id: string;
  clusterId: string;
  inputWeight: number;
  outputWeight: number;
  creatorName: string;
  recipientName: string;
  creationDate: string;
  batchStatus: "created" | "sent" | "received";
};

type BatchDetailProps = { batch: Batch };

// TODO: Unify this with PlasticCollectionDetail!!
const BatchDetail: FC<BatchDetailProps> = ({ batch, children }) => {
  const [showDetails, setShowDetails] = useState(false);
  const toggleDetails = () => setShowDetails(!showDetails);

  const creationDateTime = DateTime.fromISO(batch.creationDate);
  const title = `Batch oprettet d ${creationDateTime.toLocaleString({
    month: "long",
    day: "2-digit",
  })}`;
  return (
    <Card style={styles.card}>
      <TouchableOpacity onPress={toggleDetails}>
        <Card.Title title={title} />
      </TouchableOpacity>
      {showDetails && (
        <Card.Content style={styles.cardContent}>
          <InformationText>Plast input: {batch.inputWeight}kg</InformationText>
          <InformationText>Batch v√¶gt: {batch.outputWeight}kg</InformationText>
          <InformationText>
            Batch oprettet af: {batch.creatorName}
          </InformationText>
          {batch.recipientName && (
            <InformationText>
              Batch sendt til: {batch.recipientName}
            </InformationText>
          )}
          {children}
        </Card.Content>
      )}
    </Card>
  );
};

type Props = {
  batches: Batch[];
  title: string;
  children?: (batch: Batch) => React.ReactNode;
};

const BatchDetails: FC<Props> = ({ batches, title, children }) => {
  return (
    <List.Section>
      <Subheader>{title}</Subheader>
      {batches.map((batch) => (
        <BatchDetail batch={batch} key={batch.id}>
          {children && children(batch)}
        </BatchDetail>
      ))}
    </List.Section>
  );
};

const styles = {
  card: {
    marginBottom: 15,
  },
  cardContent: {
    borderWidth: 0.3,
    padding: 15,
    margin: 15,
    borderColor: "lightgrey",
    borderStyle: "solid" as "solid",
  },
};

export default BatchDetails;
