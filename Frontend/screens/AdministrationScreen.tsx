import axios, { AxiosResponse } from "axios";
import * as React from "react";
import { Button, StyleSheet, TextInput } from "react-native";

import { View } from "../components/Themed";

// TODO: This should come from autogenerated typings from the backend
type AppRole = {
  displayName: string;
  id: string;
};

export default function AdministrationScreen() {
  // TODO: Get the base url out in a config file that is environment specific!!
  const axiosInstance = axios.create({
    baseURL: "http://localhost:7071/api",
    headers: {
      "access-token": sessionStorage.getItem("accessToken"),
    },
  });

  const [availableAppRoles, setAvailableAppRoles] = React.useState<AppRole[]>(
    []
  );
  // Initially, fetch the available app roles
  React.useEffect(() => {
    axiosInstance
      .get("/UserAppRoles")
      .then((response: AxiosResponse<AppRole[]>) => {
        setAvailableAppRoles(response.data);
      });
  }, []);

  const [emailToInvite, setEmailToInvite] = React.useState("");

  // TODO: Extend this with regexp to verify the shape of the email
  const emailToInviteIsInvalid = () => {
    return emailToInvite === "";
  };

  return (
    <View style={styles.container}>
      <TextInput
        value={emailToInvite}
        onChangeText={setEmailToInvite}
        style={styles.textInput}
      />
      {availableAppRoles.map((availableAppRole: AppRole) => {
        const onPress = () => {
          axiosInstance.post("/InviteExternalUser", {
            email: emailToInvite,
            appRoleId: availableAppRole.id,
          });
        };

        return (
          <Button
            key={availableAppRole.id}
            title={availableAppRole.displayName}
            onPress={onPress}
            disabled={emailToInviteIsInvalid()}
          />
        );
      })}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
  },
  textInput: {
    height: 30,
    width: "80%",
    textAlign: "center",
    backgroundColor: "lightgrey",
  },
});
