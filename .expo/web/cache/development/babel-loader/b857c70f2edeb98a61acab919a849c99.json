{"ast":null,"code":"var _jsxFileName = \"/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { AuthRequest, exchangeCodeAsync, Prompt, useAutoDiscovery } from \"expo-auth-session\";\nimport Button from \"react-native-web/dist/exports/Button\";\nWebBrowser.maybeCompleteAuthSession();\nexport default function AuthorizationButton(_ref) {\n  var handleAuthorization = _ref.handleAuthorization;\n  var discovery = useAutoDiscovery(\"https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0\");\n  var authRequest = new AuthRequest({\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    redirectUri: \"http://localhost:19006/one\",\n    prompt: Prompt.Login\n  });\n\n  var onPress = function onPress() {\n    var authSessionResult;\n    return _regeneratorRuntime.async(function onPress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!discovery) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(authRequest.getAuthRequestConfigAsync());\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(authRequest.promptAsync(discovery));\n\n          case 5:\n            authSessionResult = _context.sent;\n\n            if (authSessionResult && authSessionResult.type === \"success\" && authRequest.codeVerifier && discovery) {\n              exchangeCodeAsync({\n                code: authSessionResult.params.code,\n                scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n                clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n                redirectUri: \"http://localhost:19006/one\",\n                extraParams: {\n                  code_verifier: authRequest.codeVerifier\n                }\n              }, discovery).then(function (tokenResponse) {\n                var parts = tokenResponse.accessToken.split(\".\").map(function (part) {\n                  return Buffer.from(part.replace(/-/g, \"+\").replace(/_/g, \"/\"), \"base64\").toString();\n                });\n                var payload = JSON.parse(parts[1]);\n                handleAuthorization(parts[1]);\n                console.log(\"JWT payload\", payload);\n              }).catch(function (error) {\n                console.log(\"ERROR: \");\n                console.log(error);\n              });\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Button, {\n    title: \"Login test\",\n    onPress: onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx"],"names":["React","WebBrowser","AuthRequest","exchangeCodeAsync","Prompt","useAutoDiscovery","maybeCompleteAuthSession","AuthorizationButton","handleAuthorization","discovery","authRequest","clientId","scopes","redirectUri","prompt","Login","onPress","getAuthRequestConfigAsync","promptAsync","authSessionResult","type","codeVerifier","code","params","extraParams","code_verifier","then","tokenResponse","parts","accessToken","split","map","part","Buffer","from","replace","toString","payload","JSON","parse","console","log","catch","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,SACEC,WADF,EAEEC,iBAFF,EAGEC,MAHF,EAIEC,gBAJF,QAKO,mBALP;;AAQAJ,UAAU,CAACK,wBAAX;AAMA,eAAe,SAASC,mBAAT,OAA6D;AAAA,MAA9BC,mBAA8B,QAA9BA,mBAA8B;AAE1E,MAAMC,SAAS,GAAGJ,gBAAgB,CAChC,6EADgC,CAAlC;AAIA,MAAMK,WAAW,GAAG,IAAIR,WAAJ,CAAgB;AAClCS,IAAAA,QAAQ,EAAE,sCADwB;AAElCC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAF0B;AAIlCC,IAAAA,WAAW,EAAE,4BAJqB;AAKlCC,IAAAA,MAAM,EAAEV,MAAM,CAACW;AALmB,GAAhB,CAApB;;AAcA,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACVP,SADU;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAKNC,WAAW,CAACO,yBAAZ,EALM;;AAAA;AAAA;AAAA,6CAMoBP,WAAW,CAACQ,WAAZ,CAAwBT,SAAxB,CANpB;;AAAA;AAMNU,YAAAA,iBANM;;AAOZ,gBACEA,iBAAiB,IACjBA,iBAAiB,CAACC,IAAlB,KAA2B,SAD3B,IAEAV,WAAW,CAACW,YAFZ,IAGAZ,SAJF,EAKE;AACAN,cAAAA,iBAAiB,CACf;AACEmB,gBAAAA,IAAI,EAAEH,iBAAiB,CAACI,MAAlB,CAAyBD,IADjC;AAEEV,gBAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAFV;AAGED,gBAAAA,QAAQ,EAAE,sCAHZ;AAIEE,gBAAAA,WAAW,EAAE,4BAJf;AAKEW,gBAAAA,WAAW,EAAE;AACXC,kBAAAA,aAAa,EAAEf,WAAW,CAACW;AADhB;AALf,eADe,EAUfZ,SAVe,CAAjB,CAYGiB,IAZH,CAYQ,UAACC,aAAD,EAAmB;AAEvB,oBAAMC,KAAK,GAAGD,aAAa,CAACE,WAAd,CACXC,KADW,CACL,GADK,EAEXC,GAFW,CAEP,UAACC,IAAD;AAAA,yBACHC,MAAM,CAACC,IAAP,CACEF,IAAI,CAACG,OAAL,CAAa,IAAb,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,IAAhC,EAAsC,GAAtC,CADF,EAEE,QAFF,EAGEC,QAHF,EADG;AAAA,iBAFO,CAAd;AASA,oBAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWX,KAAK,CAAC,CAAD,CAAhB,CAAhB;AACApB,gBAAAA,mBAAmB,CAACoB,KAAK,CAAC,CAAD,CAAN,CAAnB;AAEAY,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,OAA3B;AACD,eA3BH,EA4BGK,KA5BH,CA4BS,UAACC,KAAD,EAAW;AAChBH,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,eA/BH;AAgCD;;AA7CW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAiDA,SAAO,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,YAAd;AAA2B,IAAA,OAAO,EAAE3B,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n  AuthRequest,\n  exchangeCodeAsync,\n  Prompt,\n  useAutoDiscovery,\n} from \"expo-auth-session\";\nimport { Button } from \"react-native\";\n\nWebBrowser.maybeCompleteAuthSession();\n\ntype Props = {\n  handleAuthorization: (payload: any) => void;\n};\n\nexport default function AuthorizationButton({ handleAuthorization }: Props) {\n  // Endpoint\n  const discovery = useAutoDiscovery(\n    \"https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0\"\n  );\n\n  const authRequest = new AuthRequest({\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    // For usage in managed apps using the proxy\n    redirectUri: \"http://localhost:19006/one\",\n    prompt: Prompt.Login,\n    /* redirectUri: makeRedirectUri({\n        // For usage in bare and standalone\n        native: 'houe-plastic-recycling://react-native-auth/',\n      }),\n    */\n  });\n\n  // Request\n  const onPress = async () => {\n    if (discovery) {\n      /* We don't care about the return value of this, but one of the side effects of it is that\n       * the challenge and verifier is set up correctly. This is not the most elegant way of doing\n       * it but that is the way the library works for now */\n      await authRequest.getAuthRequestConfigAsync();\n      const authSessionResult = await authRequest.promptAsync(discovery);\n      if (\n        authSessionResult &&\n        authSessionResult.type === \"success\" &&\n        authRequest.codeVerifier &&\n        discovery\n      ) {\n        exchangeCodeAsync(\n          {\n            code: authSessionResult.params.code,\n            scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n            redirectUri: \"http://localhost:19006/one\",\n            extraParams: {\n              code_verifier: authRequest.codeVerifier,\n            },\n          },\n          discovery\n        )\n          .then((tokenResponse) => {\n            // TODO: In time, move this to an Azure function. For now, it is fine here\n            const parts = tokenResponse.accessToken\n              .split(\".\")\n              .map((part) =>\n                Buffer.from(\n                  part.replace(/-/g, \"+\").replace(/_/g, \"/\"),\n                  \"base64\"\n                ).toString()\n              );\n\n            const payload = JSON.parse(parts[1]);\n            handleAuthorization(parts[1]);\n\n            console.log(\"JWT payload\", payload);\n          })\n          .catch((error) => {\n            console.log(\"ERROR: \");\n            console.log(error);\n          });\n      }\n    }\n  };\n\n  return <Button title=\"Login test\" onPress={onPress} />;\n}\n"]},"metadata":{},"sourceType":"module"}