{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { AuthRequest, exchangeCodeAsync, Prompt, useAuthRequest, useAutoDiscovery } from \"expo-auth-session\";\nimport Button from \"react-native-web/dist/exports/Button\";\nWebBrowser.maybeCompleteAuthSession();\nexport default function AuthorizationButton() {\n  var discovery = useAutoDiscovery(\"https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0\");\n  var authRequest = new AuthRequest({\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    redirectUri: \"http://localhost:19006/one\",\n    prompt: Prompt.Login\n  });\n\n  var _useAuthRequest = useAuthRequest({\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    redirectUri: \"http://localhost:19006/one\",\n    prompt: Prompt.Login,\n    codeChallenge: codeChallenge\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  var onPress = function onPress() {\n    var authSessionResult;\n    return _regeneratorRuntime.async(function onPress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(promptAsync());\n\n          case 2:\n            authSessionResult = _context.sent;\n            console.log(authSessionResult);\n\n            if (authSessionResult && authSessionResult.type === \"success\" && discovery) {\n              exchangeCodeAsync({\n                code: authSessionResult.params.code,\n                scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n                clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n                redirectUri: \"http://localhost:19006/one\",\n                extraParams: {\n                  code_verifier: codeVerifier\n                }\n              }, discovery).then(function (tokenResponse) {\n                debugger;\n                console.log(\"THE TOKEN RESPONSE: \");\n                console.log(tokenResponse);\n              }).catch(function (error) {\n                debugger;\n                console.log(\"ERROR: \");\n                console.log(error);\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Button, {\n    title: \"Login test\",\n    onPress: initiateAuthorization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx"],"names":["React","WebBrowser","AuthRequest","exchangeCodeAsync","Prompt","useAuthRequest","useAutoDiscovery","maybeCompleteAuthSession","AuthorizationButton","discovery","authRequest","clientId","scopes","redirectUri","prompt","Login","codeChallenge","request","response","promptAsync","onPress","authSessionResult","console","log","type","code","params","extraParams","code_verifier","codeVerifier","then","tokenResponse","catch","error","initiateAuthorization"],"mappings":";;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,SACEC,WADF,EAEEC,iBAFF,EAGEC,MAHF,EAIEC,cAJF,EAKEC,gBALF,QAMO,mBANP;;AAUAL,UAAU,CAACM,wBAAX;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAE5C,MAAMC,SAAS,GAAGH,gBAAgB,CAChC,6EADgC,CAAlC;AAIA,MAAMI,WAAW,GAAG,IAAIR,WAAJ,CAAgB;AAClCS,IAAAA,QAAQ,EAAE,sCADwB;AAElCC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAF0B;AAIlCC,IAAAA,WAAW,EAAE,4BAJqB;AAKlCC,IAAAA,MAAM,EAAEV,MAAM,CAACW;AALmB,GAAhB,CAApB;;AAN4C,wBAoBHV,cAAc,CACrD;AACEM,IAAAA,QAAQ,EAAE,sCADZ;AAEEC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAFV;AAIEC,IAAAA,WAAW,EAAE,4BAJf;AAKEC,IAAAA,MAAM,EAAEV,MAAM,CAACW,KALjB;AAMEC,IAAAA,aAAa,EAAbA;AANF,GADqD,EAcrDP,SAdqD,CApBX;AAAA;AAAA,MAoBrCQ,OApBqC;AAAA,MAoB5BC,QApB4B;AAAA,MAoBlBC,WApBkB;;AAqC5C,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBD,WAAW,EAD7B;;AAAA;AACRE,YAAAA,iBADQ;AAEdC,YAAAA,OAAO,CAACC,GAAR,CAAYF,iBAAZ;;AAEA,gBACEA,iBAAiB,IACjBA,iBAAiB,CAACG,IAAlB,KAA2B,SAD3B,IAEAf,SAHF,EAIE;AACAN,cAAAA,iBAAiB,CACf;AACEsB,gBAAAA,IAAI,EAAEJ,iBAAiB,CAACK,MAAlB,CAAyBD,IADjC;AAEEb,gBAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAFV;AAGED,gBAAAA,QAAQ,EAAE,sCAHZ;AAIEE,gBAAAA,WAAW,EAAE,4BAJf;AAKEc,gBAAAA,WAAW,EAAE;AACXC,kBAAAA,aAAa,EAAEC;AADJ;AALf,eADe,EAUfpB,SAVe,CAAjB,CAYGqB,IAZH,CAYQ,UAACC,aAAD,EAAmB;AACvB;AACAT,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYQ,aAAZ;AACD,eAhBH,EAiBGC,KAjBH,CAiBS,UAACC,KAAD,EAAW;AAChB;AACAX,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,eArBH;AAsBD;;AA/Ba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAkCA,SAAO,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,YAAd;AAA2B,IAAA,OAAO,EAAEC,qBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React, { useEffect } from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n  AuthRequest,\n  exchangeCodeAsync,\n  Prompt,\n  useAuthRequest,\n  useAutoDiscovery,\n} from \"expo-auth-session\";\nimport { Button } from \"react-native\";\nimport { buildCodeAsync } from \"expo-auth-session/build/PKCE\";\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function AuthorizationButton() {\n  // Endpoint\n  const discovery = useAutoDiscovery(\n    \"https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0\"\n  );\n\n  const authRequest = new AuthRequest({\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    // For usage in managed apps using the proxy\n    redirectUri: \"http://localhost:19006/one\",\n    prompt: Prompt.Login,\n    /* redirectUri: makeRedirectUri({\n        // For usage in bare and standalone\n        native: 'houe-plastic-recycling://react-native-auth/',\n      }),\n       */\n  });\n\n  // Request\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n      scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n      // For usage in managed apps using the proxy\n      redirectUri: \"http://localhost:19006/one\",\n      prompt: Prompt.Login,\n      codeChallenge,\n      /* redirectUri: makeRedirectUri({\n        // For usage in bare and standalone\n        native: 'houe-plastic-recycling://react-native-auth/',\n      }),\n       */\n    },\n    discovery\n  );\n\n  const onPress = async () => {\n    const authSessionResult = await promptAsync();\n    console.log(authSessionResult);\n\n    if (\n      authSessionResult &&\n      authSessionResult.type === \"success\" &&\n      discovery\n    ) {\n      exchangeCodeAsync(\n        {\n          code: authSessionResult.params.code,\n          scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n          clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n          redirectUri: \"http://localhost:19006/one\",\n          extraParams: {\n            code_verifier: codeVerifier,\n          },\n        },\n        discovery\n      )\n        .then((tokenResponse) => {\n          debugger;\n          console.log(\"THE TOKEN RESPONSE: \");\n          console.log(tokenResponse);\n        })\n        .catch((error) => {\n          debugger;\n          console.log(\"ERROR: \");\n          console.log(error);\n        });\n    }\n  };\n\n  return <Button title=\"Login test\" onPress={initiateAuthorization} />;\n}\n"]},"metadata":{},"sourceType":"module"}