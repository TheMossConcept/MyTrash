{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoder_1 = __importDefault(require(\"./encoder\"));\n\nvar decoder_1 = __importDefault(require(\"./decoder\"));\n\nvar JWT = {\n  encode: function encode(body, key, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var encoder = new encoder_1.default(body, key, options);\n    return encoder.encodeAndSign();\n  },\n  decode: function decode(token, key, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var decoder = new decoder_1.default(key);\n    return decoder.decodeAndVerify(token, options);\n  }\n};\nexports.default = JWT;","map":{"version":3,"sources":["../../lib/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,aAAA,CAAA;;AACA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,aAAA,CAAA;;AAIA,IAAM,GAAG,GAAG;AACV,EAAA,MAAM,EAAE,gBAAC,IAAD,EAAgB,GAAhB,EAAkC,OAAlC,EAA+D;AAA7B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA6B;;AACrE,QAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,EAAuB,OAAvB,CAAhB;AAEA,WAAO,OAAO,CAAC,aAAR,EAAP;AACD,GALS;AAOV,EAAA,MAAM,EAAE,gBAAC,KAAD,EAAkB,GAAlB,EAAoC,OAApC,EAAiE;AAA7B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA6B;;AACvE,QAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CAAY,GAAZ,CAAhB;AAEA,WAAO,OAAO,CAAC,eAAR,CAAwB,KAAxB,EAA+B,OAA/B,CAAP;AACD;AAXS,CAAZ;AAcA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar encoder_1 = __importDefault(require(\"./encoder\"));\nvar decoder_1 = __importDefault(require(\"./decoder\"));\nvar JWT = {\n    encode: function (body, key, options) {\n        if (options === void 0) { options = {}; }\n        var encoder = new encoder_1.default(body, key, options);\n        return encoder.encodeAndSign();\n    },\n    decode: function (token, key, options) {\n        if (options === void 0) { options = {}; }\n        var decoder = new decoder_1.default(key);\n        return decoder.decodeAndVerify(token, options);\n    }\n};\nexports.default = JWT;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}