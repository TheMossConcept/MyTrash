{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { exchangeCodeAsync, Prompt, useAuthRequest, useAutoDiscovery } from 'expo-auth-session';\nimport Button from \"react-native-web/dist/exports/Button\";\nWebBrowser.maybeCompleteAuthSession();\nexport default function AuthorizationButton() {\n  var discovery = useAutoDiscovery('https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0');\n\n  var _useAuthRequest = useAuthRequest({\n    clientId: 'a67a4317-87b9-403b-8db9-e0227117bc8a',\n    scopes: ['openid', 'profile', 'email', 'offline_access'],\n    redirectUri: 'http://localhost:19006/one',\n    prompt: Prompt.Login,\n    codeChallenge: 'ThisIsntRandomButItNeedsToBe43CharactersLong'\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  useEffect(function () {\n    console.log('Response changed and is now: ');\n    console.log(response);\n  }, [response]);\n  useEffect(function () {\n    console.log('Request change and is now: ');\n    console.log(request);\n  }, [request]);\n\n  var onPress = function onPress() {\n    var authSessionResult, test;\n    return _regeneratorRuntime.async(function onPress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(promptAsync());\n\n          case 2:\n            authSessionResult = _context.sent;\n            console.log(authSessionResult);\n\n            if (authSessionResult && authSessionResult.type === 'success' && discovery) {\n              test = exchangeCodeAsync({\n                code: authSessionResult.params['code'],\n                scopes: ['openid', 'profile', 'email', 'offline_access'],\n                clientId: 'a67a4317-87b9-403b-8db9-e0227117bc8a',\n                redirectUri: 'http://localhost:19006/one',\n                extraParams: {\n                  code_verifier: 'ThisIsntRandomButItNeedsToBe43CharactersLong'\n                }\n              }, discovery).then(function (tokenResponse) {\n                debugger;\n                console.log(\"THE TOKEN RESPONSE: \");\n                console.log(tokenResponse);\n              }).catch(function (error) {\n                debugger;\n                console.log('ERROR: ');\n                console.log(error);\n              });\n              console.log(test);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Button, {\n    title: \"Login test\",\n    onPress: onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  });\n}","map":{"version":3,"sources":["/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx"],"names":["React","useEffect","WebBrowser","exchangeCodeAsync","Prompt","useAuthRequest","useAutoDiscovery","maybeCompleteAuthSession","AuthorizationButton","discovery","clientId","scopes","redirectUri","prompt","Login","codeChallenge","request","response","promptAsync","console","log","onPress","authSessionResult","type","test","code","params","extraParams","code_verifier","then","tokenResponse","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,SAASC,iBAAT,EAA6CC,MAA7C,EAAoEC,cAApE,EAAoFC,gBAApF,QAA4G,mBAA5G;;AAGAJ,UAAU,CAACK,wBAAX;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAE5C,MAAMC,SAAS,GAAGH,gBAAgB,CAAC,6EAAD,CAAlC;;AAF4C,wBAIHD,cAAc,CACrD;AACEK,IAAAA,QAAQ,EAAE,sCADZ;AAEEC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAFV;AAIEC,IAAAA,WAAW,EAAE,4BAJf;AAKEC,IAAAA,MAAM,EAAET,MAAM,CAACU,KALjB;AAMEC,IAAAA,aAAa,EAAE;AANjB,GADqD,EAcrDN,SAdqD,CAJX;AAAA;AAAA,MAIrCO,OAJqC;AAAA,MAI5BC,QAJ4B;AAAA,MAIlBC,WAJkB;;AAqB5CjB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,GAHQ,EAGN,CAACA,QAAD,CAHM,CAAT;AAKAhB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACD,GAHQ,EAGN,CAACA,OAAD,CAHM,CAAT;;AAKA,MAAMK,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBH,WAAW,EAD7B;;AAAA;AACRI,YAAAA,iBADQ;AAEdH,YAAAA,OAAO,CAACC,GAAR,CAAYE,iBAAZ;;AAEA,gBAAIA,iBAAiB,IAAIA,iBAAiB,CAACC,IAAlB,KAA2B,SAAhD,IAA6Dd,SAAjE,EAA4E;AACpEe,cAAAA,IADoE,GAC7DrB,iBAAiB,CAAC;AAACsB,gBAAAA,IAAI,EAAEH,iBAAiB,CAACI,MAAlB,CAAyB,MAAzB,CAAP;AAAyCf,gBAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAAjD;AAAmGD,gBAAAA,QAAQ,EAAE,sCAA7G;AAAqJE,gBAAAA,WAAW,EAAG,4BAAnK;AAAiMe,gBAAAA,WAAW,EAAE;AAAEC,kBAAAA,aAAa,EAAE;AAAjB;AAA9M,eAAD,EAAoRnB,SAApR,CAAjB,CAAgToB,IAAhT,CAAqT,UAACC,aAAD,EAAmB;AACnV;AACAX,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYU,aAAZ;AACD,eAJY,EAIVC,KAJU,CAIJ,UAACC,KAAD,EAAW;AAClB;AACAb,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACD,eARY,CAD6D;AAU1Eb,cAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACD;;AAfa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAkBA,SAAQ,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,YAAd;AAA2B,IAAA,OAAO,EAAEH,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACD","sourcesContent":["import React, {useEffect} from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { exchangeCodeAsync, makeRedirectUri, Prompt, TokenResponse, useAuthRequest, useAutoDiscovery } from 'expo-auth-session';\nimport {Button} from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function AuthorizationButton() {\n// Endpoint\n  const discovery = useAutoDiscovery('https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0');\n  // Request\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'a67a4317-87b9-403b-8db9-e0227117bc8a',\n      scopes: ['openid', 'profile', 'email', 'offline_access'],\n      // For usage in managed apps using the proxy\n      redirectUri: 'http://localhost:19006/one',\n      prompt: Prompt.Login, \n      codeChallenge: 'ThisIsntRandomButItNeedsToBe43CharactersLong'\n      /*redirectUri: makeRedirectUri({\n        // For usage in bare and standalone\n        native: 'houe-plastic-recycling://react-native-auth/',\n      }),\n       */\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    console.log('Response changed and is now: ');\n    console.log(response)\n  }, [response])\n\n  useEffect(() => {\n    console.log('Request change and is now: ')\n    console.log(request)\n  }, [request])\n\n  const onPress = async () => {\n    const authSessionResult = await promptAsync();\n    console.log(authSessionResult)\n\n    if (authSessionResult && authSessionResult.type === 'success' && discovery) {\n      const test = exchangeCodeAsync({code: authSessionResult.params['code'], scopes: ['openid', 'profile', 'email', 'offline_access'], clientId: 'a67a4317-87b9-403b-8db9-e0227117bc8a', redirectUri:  'http://localhost:19006/one', extraParams: { code_verifier: 'ThisIsntRandomButItNeedsToBe43CharactersLong' } }, discovery).then((tokenResponse) => {\n        debugger;\n        console.log(\"THE TOKEN RESPONSE: \")\n        console.log(tokenResponse)\n      }).catch((error) => {\n        debugger;\n        console.log('ERROR: ')\n        console.log(error)\n      })\n      console.log(test)\n    }\n  }\n\n  return (<Button title=\"Login test\" onPress={onPress} />);\n}\n"]},"metadata":{},"sourceType":"module"}