{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar enc_base64_1 = __importDefault(require(\"crypto-js/enc-base64\"));\n\nvar enc_utf8_1 = __importDefault(require(\"crypto-js/enc-utf8\"));\n\nvar verifier_1 = __importDefault(require(\"./verifier\"));\n\nvar Errors = __importStar(require(\"./errors\"));\n\nvar algorithms_1 = __importStar(require(\"./algorithms\"));\n\nvar helpers_1 = require(\"./helpers\");\n\nvar _key;\n\nvar parse = function parse(encodedString) {\n  return JSON.parse(enc_base64_1.default.parse(encodedString).toString(enc_utf8_1.default));\n};\n\nvar sign = function sign(body, algorithm) {\n  return helpers_1.urlEncodeBase64(algorithm(body, _key).toString(enc_base64_1.default));\n};\n\nvar Decoder = function () {\n  function Decoder(key) {\n    _key = key;\n  }\n\n  Object.defineProperty(Decoder.prototype, \"header\", {\n    set: function set(header) {\n      try {\n        this._header = parse(header);\n      } catch (error) {\n        throw new Errors.InvalidHeader();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Decoder.prototype, \"body\", {\n    set: function set(body) {\n      try {\n        this._body = parse(body);\n      } catch (error) {\n        throw new Errors.InvalidBody();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Decoder.prototype.getAlgorithm = function () {\n    var algorithm = this._header && this._header.alg;\n\n    if (!algorithm) {\n      throw new Errors.AlgorithmMissing();\n    }\n\n    if (algorithm === 'none') {\n      return 'none';\n    }\n\n    if (!~algorithms_1.supportedAlgorithms.indexOf(algorithm)) {\n      throw new Errors.AlgorithmNotSupported();\n    }\n\n    return algorithms_1.default[algorithm];\n  };\n\n  Decoder.prototype.verifySignature = function (encodedHeader, encodedBody) {\n    if (this.algorithm === 'none') {\n      return true;\n    }\n\n    var signatureBody = encodedHeader + \".\" + encodedBody;\n\n    if (this.signature !== sign(signatureBody, this.algorithm)) {\n      throw new Errors.SignatureInvalid();\n    }\n\n    return true;\n  };\n\n  Decoder.prototype.verifyClaims = function () {\n    verifier_1.default.verifyAll(this._body, this.options);\n  };\n\n  Decoder.prototype.decodeAndVerify = function (token, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _a = token.toString().split('.'),\n        encodedHeader = _a[0],\n        encodedBody = _a[1],\n        signature = _a[2];\n\n    if (!encodedHeader || !encodedBody) {\n      throw new Errors.InvalidStructure();\n    }\n\n    this.options = options;\n    this.header = encodedHeader;\n    this.body = encodedBody;\n    this.signature = signature;\n    this.algorithm = this.getAlgorithm();\n\n    if (_key !== null) {\n      this.verifySignature(encodedHeader, encodedBody);\n    }\n\n    this.verifyClaims();\n    return this._body;\n  };\n\n  return Decoder;\n}();\n\nexports.default = Decoder;","map":{"version":3,"sources":["../../lib/decoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar enc_base64_1 = __importDefault(require(\"crypto-js/enc-base64\"));\nvar enc_utf8_1 = __importDefault(require(\"crypto-js/enc-utf8\"));\nvar verifier_1 = __importDefault(require(\"./verifier\"));\nvar Errors = __importStar(require(\"./errors\"));\nvar algorithms_1 = __importStar(require(\"./algorithms\"));\nvar helpers_1 = require(\"./helpers\");\nvar _key;\nvar parse = function (encodedString) {\n    return JSON.parse(enc_base64_1.default.parse(encodedString).toString(enc_utf8_1.default));\n};\nvar sign = function (body, algorithm) {\n    return helpers_1.urlEncodeBase64(algorithm(body, _key).toString(enc_base64_1.default));\n};\nvar Decoder = /** @class */ (function () {\n    function Decoder(key) {\n        _key = key;\n    }\n    Object.defineProperty(Decoder.prototype, \"header\", {\n        set: function (header) {\n            try {\n                this._header = parse(header);\n            }\n            catch (error) {\n                throw new Errors.InvalidHeader();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Decoder.prototype, \"body\", {\n        set: function (body) {\n            try {\n                this._body = parse(body);\n            }\n            catch (error) {\n                throw new Errors.InvalidBody();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Decoder.prototype.getAlgorithm = function () {\n        var algorithm = this._header && this._header.alg;\n        if (!algorithm) {\n            throw new Errors.AlgorithmMissing();\n        }\n        if (algorithm === 'none') {\n            return 'none';\n        }\n        if (!~algorithms_1.supportedAlgorithms.indexOf(algorithm)) {\n            throw new Errors.AlgorithmNotSupported();\n        }\n        return algorithms_1.default[algorithm];\n    };\n    Decoder.prototype.verifySignature = function (encodedHeader, encodedBody) {\n        if (this.algorithm === 'none') {\n            return true;\n        }\n        var signatureBody = encodedHeader + \".\" + encodedBody;\n        if (this.signature !== sign(signatureBody, this.algorithm)) {\n            throw new Errors.SignatureInvalid();\n        }\n        return true;\n    };\n    Decoder.prototype.verifyClaims = function () {\n        verifier_1.default.verifyAll(this._body, this.options);\n    };\n    Decoder.prototype.decodeAndVerify = function (token, options) {\n        if (options === void 0) { options = {}; }\n        var _a = token.toString().split('.'), encodedHeader = _a[0], encodedBody = _a[1], signature = _a[2];\n        if (!encodedHeader || !encodedBody) {\n            throw new Errors.InvalidStructure();\n        }\n        this.options = options;\n        this.header = encodedHeader;\n        this.body = encodedBody;\n        this.signature = signature;\n        this.algorithm = this.getAlgorithm();\n        if (_key !== null) {\n            this.verifySignature(encodedHeader, encodedBody);\n        }\n        this.verifyClaims();\n        return this._body;\n    };\n    return Decoder;\n}());\nexports.default = Decoder;\n//# sourceMappingURL=decoder.js.map"]},"metadata":{},"sourceType":"script"}