{"ast":null,"code":"var _jsxFileName = \"/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { AuthRequest, exchangeCodeAsync, makeRedirectUri, useAutoDiscovery } from \"expo-auth-session\";\nimport Button from \"react-native-web/dist/exports/Button\";\nWebBrowser.maybeCompleteAuthSession();\nexport default function AuthorizationButton(_ref) {\n  var handleAuthorization = _ref.handleAuthorization;\n  var discovery = useAutoDiscovery(\"https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0\");\n  var redirectUri = makeRedirectUri({\n    native: \"houe-plastic-recycling://one\",\n    path: \"one\"\n  });\n  console.log(\"Redirect uri: \" + redirectUri);\n  var authRequest = new AuthRequest({\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    redirectUri: redirectUri\n  });\n\n  var onPress = function onPress() {\n    var authSessionResult;\n    return _regeneratorRuntime.async(function onPress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!discovery) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(authRequest.getAuthRequestConfigAsync());\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(authRequest.promptAsync(discovery));\n\n          case 5:\n            authSessionResult = _context.sent;\n            console.log(authSessionResult.type);\n            console.log(authRequest.codeVerifier);\n\n            if (authSessionResult && authSessionResult.type === \"success\" && authRequest.codeVerifier && discovery) {\n              exchangeCodeAsync({\n                code: authSessionResult.params.code,\n                scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n                clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n                redirectUri: redirectUri,\n                extraParams: {\n                  code_verifier: authRequest.codeVerifier\n                }\n              }, discovery).then(function () {\n                handleAuthorization();\n              }).catch(function (error) {\n                console.log(\"ERROR: \");\n                console.log(error);\n              });\n            }\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Button, {\n    title: \"Login\",\n    onPress: onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/niklasmoss/Documents/work/Houe/code/plastic-recycling-app/components/AuthorizationButton.tsx"],"names":["React","WebBrowser","AuthRequest","exchangeCodeAsync","makeRedirectUri","useAutoDiscovery","maybeCompleteAuthSession","AuthorizationButton","handleAuthorization","discovery","redirectUri","native","path","console","log","authRequest","clientId","scopes","onPress","getAuthRequestConfigAsync","promptAsync","authSessionResult","type","codeVerifier","code","params","extraParams","code_verifier","then","catch","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,SACEC,WADF,EAEEC,iBAFF,EAGEC,eAHF,EAIEC,gBAJF,QAKO,mBALP;;AAQAJ,UAAU,CAACK,wBAAX;AAMA,eAAe,SAASC,mBAAT,OAA6D;AAAA,MAA9BC,mBAA8B,QAA9BA,mBAA8B;AAE1E,MAAMC,SAAS,GAAGJ,gBAAgB,CAChC,6EADgC,CAAlC;AAIA,MAAMK,WAAW,GAAGN,eAAe,CAAC;AAElCO,IAAAA,MAAM,EAAE,8BAF0B;AAGlCC,IAAAA,IAAI,EAAE;AAH4B,GAAD,CAAnC;AAMAC,EAAAA,OAAO,CAACC,GAAR,oBAA6BJ,WAA7B;AAEA,MAAMK,WAAW,GAAG,IAAIb,WAAJ,CAAgB;AAClCc,IAAAA,QAAQ,EAAE,sCADwB;AAElCC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAF0B;AAKlCP,IAAAA,WAAW,EAAXA;AALkC,GAAhB,CAApB;;AASA,MAAMQ,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACVT,SADU;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAKNM,WAAW,CAACI,yBAAZ,EALM;;AAAA;AAAA;AAAA,6CAMoBJ,WAAW,CAACK,WAAZ,CAAwBX,SAAxB,CANpB;;AAAA;AAMNY,YAAAA,iBANM;AAOZR,YAAAA,OAAO,CAACC,GAAR,CAAYO,iBAAiB,CAACC,IAA9B;AACAT,YAAAA,OAAO,CAACC,GAAR,CAAYC,WAAW,CAACQ,YAAxB;;AACA,gBACEF,iBAAiB,IACjBA,iBAAiB,CAACC,IAAlB,KAA2B,SAD3B,IAEAP,WAAW,CAACQ,YAFZ,IAGAd,SAJF,EAKE;AACAN,cAAAA,iBAAiB,CACf;AACEqB,gBAAAA,IAAI,EAAEH,iBAAiB,CAACI,MAAlB,CAAyBD,IADjC;AAEEP,gBAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,gBAA/B,CAFV;AAGED,gBAAAA,QAAQ,EAAE,sCAHZ;AAIEN,gBAAAA,WAAW,EAAXA,WAJF;AAKEgB,gBAAAA,WAAW,EAAE;AACXC,kBAAAA,aAAa,EAAEZ,WAAW,CAACQ;AADhB;AALf,eADe,EAUfd,SAVe,CAAjB,CAYGmB,IAZH,CAYQ,YAAM;AACVpB,gBAAAA,mBAAmB;AACpB,eAdH,EAeGqB,KAfH,CAeS,UAACC,KAAD,EAAW;AAChBjB,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACD,eAlBH;AAmBD;;AAlCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAsCA,SAAO,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,OAAO,EAAEZ,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n  AuthRequest,\n  exchangeCodeAsync,\n  makeRedirectUri,\n  useAutoDiscovery,\n} from \"expo-auth-session\";\nimport { Button } from \"react-native\";\n\nWebBrowser.maybeCompleteAuthSession();\n\ntype Props = {\n  handleAuthorization: () => void;\n};\n\nexport default function AuthorizationButton({ handleAuthorization }: Props) {\n  // Endpoint\n  const discovery = useAutoDiscovery(\n    \"https://login.microsoftonline.com/65fa44cb-fe68-4b06-ad9f-d4343bd7589f/v2.0\"\n  );\n\n  const redirectUri = makeRedirectUri({\n    // For usage in bare and standalone\n    native: \"houe-plastic-recycling://one\",\n    path: \"one\",\n  });\n\n  console.log(`Redirect uri: ${redirectUri}`);\n\n  const authRequest = new AuthRequest({\n    clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n    scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    // redirectUri: \"houe-plastic-recycling://one\",\n    // For usage in managed apps using the proxy\n    redirectUri,\n  });\n\n  // Request\n  const onPress = async () => {\n    if (discovery) {\n      /* We don't care about the return value of this, but one of the side effects of it is that\n       * the challenge and verifier is set up correctly. This is not the most elegant way of doing\n       * it but that is the way the library works for now */\n      await authRequest.getAuthRequestConfigAsync();\n      const authSessionResult = await authRequest.promptAsync(discovery);\n      console.log(authSessionResult.type);\n      console.log(authRequest.codeVerifier);\n      if (\n        authSessionResult &&\n        authSessionResult.type === \"success\" &&\n        authRequest.codeVerifier &&\n        discovery\n      ) {\n        exchangeCodeAsync(\n          {\n            code: authSessionResult.params.code,\n            scopes: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n            clientId: \"a67a4317-87b9-403b-8db9-e0227117bc8a\",\n            redirectUri,\n            extraParams: {\n              code_verifier: authRequest.codeVerifier,\n            },\n          },\n          discovery\n        )\n          .then(() => {\n            handleAuthorization();\n          })\n          .catch((error) => {\n            console.log(\"ERROR: \");\n            console.log(error);\n          });\n      }\n    }\n  };\n\n  return <Button title=\"Login\" onPress={onPress} />;\n}\n"]},"metadata":{},"sourceType":"module"}